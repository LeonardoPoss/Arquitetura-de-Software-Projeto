import os
import kaggle
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from AUTH.kaggle_connect import autenticar_kaggle

def verificar_e_baixar_dataset(dataset_name, pasta_destino="Dataset"):
    """
    Verifica se o dataset j√° existe localmente e, se n√£o existir, faz o download do Kaggle.
    
    Par√¢metros:
    - dataset_name (str): Nome do dataset no Kaggle no formato "autor/dataset".
    - pasta_destino (str): Pasta onde o dataset ser√° salvo (padr√£o: "Dataset").
    """

    # Criar a pasta se n√£o existir
    os.makedirs(pasta_destino, exist_ok=True)

    # Lista arquivos relevantes no diret√≥rio
    extensoes_validas = {".csv", ".json", ".xlsx", ".zip", ".txt"}
    arquivos_existentes = [f for f in os.listdir(pasta_destino) 
                           if os.path.isfile(os.path.join(pasta_destino, f)) 
                           and os.path.splitext(f)[1] in extensoes_validas]

    if arquivos_existentes:
        print(f"‚úÖ O dataset j√° foi baixado em '{pasta_destino}'.")
        return

    try:
        api = autenticar_kaggle()
        print(f"üì• Baixando dataset: {dataset_name}...")
        api.dataset_download_files(dataset_name, path=pasta_destino, unzip=True)

        # Revalidar a exist√™ncia de arquivos ap√≥s o download
        arquivos_existentes = [f for f in os.listdir(pasta_destino) 
                               if os.path.isfile(os.path.join(pasta_destino, f)) 
                               and os.path.splitext(f)[1] in extensoes_validas]

        if arquivos_existentes:
            print(f"‚úÖ Download conclu√≠do! Arquivos salvos em '{pasta_destino}'.")
        else:
            print("‚ö†Ô∏è O download foi feito, mas nenhum arquivo v√°lido foi encontrado na pasta.")
    except kaggle.rest.ApiException as e:
        print(f"‚ùå Erro ao baixar o dataset: {e}")

# Exemplo de uso:
# verificar_e_baixar_dataset("samayashar/fraud-detection-transactions-dataset")
